{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","findPhotoDay","axios","url","method","params","api_key","date","state","then","res","console","log","data","photoOfTheDay","setState","dayPhoto","findRoverPhotos","roverName","earth_date","roverPhotos","photos","findSpaceInfo","q","searchText","collection","items","spaceInfo","userSelection","e","target","name","value","Nav","to","style","padding","action","htmlFor","onChange","type","id","onClick","Photos","src","alt","RoverPhotos","className","map","obj","key","img_src","SpaceInfo","slice","nasa_id","title","links","href","description","basename","process","exact","path","component","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b105029c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./styles/app.scss\";\n// import Photos from './Photos';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends Component {\n    constructor() {\n      super();\n      this.state = {\n          date: \"\",\n          searchText: \"\",\n          roverName: \"\",\n          dayPhoto: [],\n          roverPhotos: [],\n          spaceInfo: [],\n      }\n  }\n\n\n  findPhotoDay = () => {\n    axios({\n      url: `https://api.nasa.gov/planetary/apod`,\n      method: 'GET',\n      params: {\n          api_key: `RQm9PKAWUOxPOwxSYLbTECB3ZtzrjLjlP4R9vIIm`,\n          date: this.state.date,\n      }\n  }).then( (res) => {\n      console.log(res.data);\n\n      const photoOfTheDay = res.data;\n\n      this.setState({\n          dayPhoto: photoOfTheDay,\n      })\n  })\n}\n\n  findRoverPhotos = () => {\n      axios({\n        url: `https://api.nasa.gov/mars-photos/api/v1/rovers/${this.state.roverName}/photos`, // need to be dynamic\n        method: 'GET',\n        params: {\n            api_key: `RQm9PKAWUOxPOwxSYLbTECB3ZtzrjLjlP4R9vIIm`,\n            earth_date: `2020-01-16`, // need to be dynamic\n        }\n    }).then( (res) => {\n        console.log(res);\n\n        const roverPhotos = res.data.photos;\n\n        this.setState({\n          roverPhotos: roverPhotos,\n        })\n    })\n  }\n\n  findSpaceInfo = () => {\n    axios({\n      url: `https://images-api.nasa.gov/search`,\n      method: 'GET',\n      params: {\n          q: this.state.searchText,\n      }\n    }).then( (res) => {\n      console.log(res.data.collection.items);\n\n      const spaceInfo = res.data.collection.items;\n\n      this.setState({\n        spaceInfo: spaceInfo,\n      })\n    })\n\n  }\n\n  userSelection = (e) => {\n    console.log(e.target);\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  Nav = () => {\n    return(\n        <div>          \n              <header>\n                <h1>Space App</h1>\n              </header>\n              <Link to={`/photos`}><p>photos</p></Link>\n\n              {/* LOOKING FOR PHOTO OF THE DAY */}\n              <div>\n                <Link to=\"/photos/photooftheday\" style={{ padding: '10px' }}>See Photo of the day</Link>\n\n                <form action=\"\">\n                  <label htmlFor=\"date\"></label>\n                  <input onChange={this.userSelection} type=\"date\" name=\"date\" id=\"date\"/>\n                </form>\n\n                <button onClick={this.findPhotoDay}>Find photo of the day</button>\n              </div>\n\n              {/* LOOKING FOR ROVER PHOTOS */}\n              <div>\n              <Link to=\"/photos/roverPhotos\"  style={{ padding: '10px' }}>See Mars Rover Photos</Link>\n\n                <form action=\"\">\n                  <label htmlFor=\"rover\">Pick a group to investigate plz</label>\n\n                  <select onChange={ this.userSelection } type=\"rover\" id=\"rover\" name=\"roverName\">\n                    <option name=\"roverName\" value=\"\">Select a desired rover</option>\n                    <option name=\"roverName\" value=\"spirit\">Spirit</option>\n                    <option name=\"roverName\" value=\"opportunity\">Opportunity</option>\n                    <option name=\"roverName\" value=\"curiosity\">Curiosity</option>\n                  </select>\n                </form>\n                \n                <button onClick={this.findRoverPhotos}>Find rover photos</button>\n              </div>\n\n              {/* LOOKING FOR ADDITIONAL SPACE INFO */}\n              <div>\n              <Link to=\"/photos/spaceInfo\"  style={{ padding: '10px' }}>See Space Information</Link>\n\n                <form action=\"\">\n                  <label htmlFor=\"text\"></label>\n                  <input onChange={this.userSelection} type=\"text\" name=\"searchText\" id=\"text\" />\n                </form>\n                \n                <button onClick={this.findSpaceInfo}>Find additional space info</button>\n              </div>\n        </div>\n    )\n  }\n\n  Photos = () => {\n    return(\n        <div>\n          <Link to={`/`}>Go home</Link>\n        </div>\n    )\n  }\n\n  dayPhoto = () => {\n    return(\n        <div>\n            <Link to={`/`}>Go back</Link>\n            <h2>This is Photo of the day!</h2>\n  \n            <div>\n              <img src={this.state.dayPhoto.url} alt='image'/>\n            </div>\n  \n        </div>\n    )\n  }\n\n  RoverPhotos = () => {\n    return(\n      <div>\n        <h2>The rover photos</h2>\n        <Link to={`/`}>Go back</Link>\n\n        <ul className=\"roverPhotos\">\n          {\n            this.state.roverPhotos.map( (obj) => {\n              console.log(obj);\n              return(\n                <li key={obj.id}><img src={obj.img_src} alt={`rover photo ${obj.earth_date}`}/></li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  SpaceInfo = () => {\n    return(\n      <div>\n        <h2>Space Info</h2>\n        <Link to={`/`}>Go back</Link>\n\n        <ul className=\"spaceInfo\">\n          {\n            this.state.spaceInfo.slice(0, 20).map( (obj) => {\n              console.log(obj);\n              return(\n                <li key={obj.data[0].nasa_id}>\n                  <h3>{obj.data[0].title}</h3>\n                  <img src={obj.links[0].href} alt={`rover photo ${obj.data[0].title}`}/>\n                  <p>{obj.data[0].description}</p>\n                  </li>\n                  \n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n  \n\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={ this.Nav } />\n\n          <Route exact path=\"/photos\" component={ this.Photos } />\n          <Route exact path=\"/photos/photooftheday\" component={this.dayPhoto} />\n          <Route exact path=\"/photos/roverPhotos\" component={ this.RoverPhotos } />\n          <Route exact path=\"/photos/spaceInfo\" component={ this.SpaceInfo } />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}