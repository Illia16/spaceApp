{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleSubmit","axios","url","method","params","api_key","date","then","res","console","log","data","photoOfTheDay","setState","dayPhoto","earth_date","roverPhotos","photos","q","collection","items","spaceInfo","Nav","to","Photos","onClick","src","state","alt","RoverPhotos","className","map","obj","key","id","img_src","SpaceInfo","slice","nasa_id","title","links","href","description","exact","path","component","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.978fa653.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./styles/app.scss\";\n// import Photos from './Photos';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass App extends Component {\n    constructor() {\n      super();\n      this.state = {\n          dayPhoto: [],\n          roverPhotos: [],\n          spaceInfo: [],\n      }\n  }\n\n  handleSubmit = () => {\n      axios({\n          url: `https://api.nasa.gov/planetary/apod`,\n          method: 'GET',\n          params: {\n              api_key: `RQm9PKAWUOxPOwxSYLbTECB3ZtzrjLjlP4R9vIIm`,\n              date: `2020-01-16`, // need to be dynamic\n          }\n      }).then( (res) => {\n          console.log(res.data);\n\n          const photoOfTheDay = res.data;\n\n          this.setState({\n              dayPhoto: photoOfTheDay,\n          })\n      })\n\n      axios({\n        url: `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos`, // need to be dynamic\n        method: 'GET',\n        params: {\n            api_key: `RQm9PKAWUOxPOwxSYLbTECB3ZtzrjLjlP4R9vIIm`,\n            earth_date: `2020-01-16`, // need to be dynamic\n        }\n    }).then( (res) => {\n        console.log(res);\n\n        const roverPhotos = res.data.photos;\n\n        this.setState({\n          roverPhotos: roverPhotos,\n        })\n    })\n\n    axios({\n      url: `https://images-api.nasa.gov/search`,\n      method: 'GET',\n      params: {\n          q: '2020', // need to be dynamic\n      }\n    }).then( (res) => {\n      console.log(res.data.collection.items);\n\n      const spaceInfo = res.data.collection.items;\n\n      this.setState({\n        spaceInfo: spaceInfo,\n      })\n    })\n\n  }\n\n  Nav = () => {\n    return(\n        <div>          \n              <header>\n                <h1>App</h1>\n              </header>\n              <Link to={`/photos`}><p>photos</p></Link>\n        </div>\n    )\n  }\n\n  Photos = () => {\n    return(\n        <div>\n          <Link to={`/`}>Go home</Link>\n          <Link to=\"/photos/photooftheday\">Photo of the day</Link>\n          <Link to=\"/photos/roverPhotos\">Mars Rover Photos</Link>\n          <Link to=\"/photos/spaceInfo\">Space Information</Link>\n  \n          <button onClick={this.handleSubmit}>Find</button>\n        </div>\n    )\n  }\n\n  dayPhoto = () => {\n    return(\n        <div>\n            <h2>This is Photo of the day!</h2>\n  \n            <div>\n              <img src={this.state.dayPhoto.url} alt='image'/>\n            </div>\n  \n            <Link to={`/photos`}>Go back</Link>\n        </div>\n    )\n  }\n\n  RoverPhotos = () => {\n    return(\n      <div>\n        <h2>The rover photos</h2>\n        <Link to={`/photos`}>Go back</Link>\n\n        <ul className=\"roverPhotos\">\n          {\n            this.state.roverPhotos.map( (obj) => {\n              console.log(obj);\n              return(\n                <li key={obj.id}><img src={obj.img_src} alt={`rover photo ${obj.earth_date}`}/></li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  SpaceInfo = () => {\n    return(\n      <div>\n        <h2>Space Info</h2>\n        <Link to={`/photos`}>Go back</Link>\n\n        <ul className=\"spaceInfo\">\n          {\n            this.state.spaceInfo.slice(0, 20).map( (obj) => {\n              console.log(obj);\n              return(\n                <li key={obj.data[0].nasa_id}>\n                  <h3>{obj.data[0].title}</h3>\n                  <img src={obj.links[0].href} alt={`rover photo ${obj.data[0].title}`}/>\n                  <p>{obj.data[0].description}</p>\n                  </li>\n                  \n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n  \n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={ this.Nav } />\n\n          <Route exact path=\"/photos\" component={ this.Photos } />\n          <Route exact path=\"/photos/photooftheday\" component={this.dayPhoto} />\n          <Route exact path=\"/photos/roverPhotos\" component={ this.RoverPhotos } />\n          <Route exact path=\"/photos/spaceInfo\" component={ this.SpaceInfo } />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}